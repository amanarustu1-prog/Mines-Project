import React, { useEffect, useState } from 'react';
import './CreateChallan.css';
import { CheckCircleIcon, ClockIcon, Edit3Icon, PlusIcon, TrendingUpIcon } from 'lucide-react';
import { FiPrinter, FiSave, FiSearch } from 'react-icons/fi';
import { FiX } from "react-icons/fi";
import { FaEdit } from 'react-icons/fa';
import DataTable from 'react-data-table-component';
import Select from 'react-select';

// React DatePicker
import DatePicker from 'react-datepicker';
import 'react-datepicker/dist/react-datepicker.css';
import { customStyles, multiValue } from '@/common/Utility';
import { fetch_Post_Data, fetchPostData } from '@/components/hooks/Api';
import { toastifyError, toastifySuccess } from '@/common/AlertMsg';
import useResizableColumns from '@/components/customHooks/UseResizableColumns';
import { getShowingDateText } from '@/common/DateFormat';
import * as XLSX from 'xlsx';
import moment from 'moment';
import { previousDay } from 'date-fns';

// Icon components

const UsersIcon = ({ style }: { style?: React.CSSProperties }) => (
    <svg className="employee-master-icon" style={style} fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
    </svg>
);

// Base interface for common product fields
interface BaseProductFields {
    productName: string;
    id: string;
    rate: number;
    grossWeight: number;
    netWeight: number;
    lessWeight: number;
    gtWeight: number;
    amount: number;
    dateTime: string;
}

// ChallanItem is used in the form state
interface ChallanItem extends BaseProductFields {
    productName: string;
}

// ProductDetail is used in the form data
interface ProductDetail extends BaseProductFields {
    name: string;
}

interface WeightDetail {
    tareWeight: number;
    dateTime: string;
    netWeight: number;
    lessWeight: number;
    totalGTWeight: number;
    vehicleCommission: number;
}

interface ChallanFormData {
    ChallanNo: string;
    ChallanModule: string;
    financialYear: string;
    autoGenerated: boolean;
    dateTime: string;
    paymentType: 'cash' | 'credit';

    // Consignee details
    consignee: string;
    address: string;
    state: number;
    district: number;
    pin: string;
    contact: string;
    emailId: string;

    // Vehicle details
    advAmount: number;
    vehicleType: number;
    vehicleNo: string;
    vehicleRemarks: string;
    driverName: string;
    driverNumber: number;

    // GST details
    gstBill: boolean;
    gstNumber: string;
    Party: number;
    gstName: string;
    gstAddress: string;
    gstState:  number;
    gstDistrict:  number;
    gstPin: string;

    // Additional fields
    endUser: boolean;
    dealer: boolean;
    balance: number;
    limit: number;

    // Product and weight details
    productDetails: ProductDetail[];
    weightDetails: WeightDetail;

    // Amount details
    amount: number;
    loading: number;
    commission: number;
    total: number;
    gstAmount: number;
    royalty: number;
    tpAmount: number;
    freightAmt: number;
    extraAmt: number;
    grandTotal: number;

    // Status field
    status?: 'Active' | 'Inactive' | 'Pending' | 'Approved' | 'Rejected';

    // Additional optional fields for UI logic
    department?: string;
    joiningDate?: string;
}

interface ChallanTableItem {
    id: string;
    ChallanNo: string;
    ChallanDate: string;
    VoucherType: string;
    consignee: string;
    partyAddress: string;
    vehicleNo: string;
    productName: string;
    grossWeight: number;
    netWeight: number;
    lessWeight: number;
    gtWeight: number;
    amount: number;
    rate: number;
    AdvAmt: string;
    Party: number;
    PartyID: string;
    OwnerMobile: string;
    DriverName: string;
    DriverMobileNo: string;
    VehicleNo: string;
    VehicleTypeid: string;
    VehicleRemarks: string;
    Address: string;
    Productid: string;
    IsGST: string;
    BillName: string;
    GstNo: string;
    State: string;
    GstAddress: string;
    Rate: string;
    Amount: string;
    LoadingAmt: string;
    CommisionAmt: string;
    TotalAmt: string;
    GSTAmt: string;
    RoyaltyAmount: string;
    TPAmount: string;
    FreightAmt: string;
    GTotal: string;
    Grossweight: string;
    TareWeight: string;
    Netweight: string;
    Lessweight: string;
    GTWeight: string;
    financialYear: string;
    paytype: string;
    Email: string;
    StatusReason: string;
    Taredate: string;
    Grossdate: string;
    ExtraAmt: string;
    ExtraAmtType: string;
    ProductId1: string;
    Status: string;
    status: 'Pending' | 'Approved' | 'Rejected';
}

interface State {
    ID: number;
    Description: string;
}

interface District {
    ID: number;
    Discription: string;
}

interface Vehicle {
    VehicleTypeID: number,
    Description: string
}

interface Party {
    PartyID: number,
    Name: string
}

export default function CreateChallan() {
    const [activeTab, setActiveTab] = useState('challanOverview');
    const [showInput, setShowInput] = useState(false);
    const [isModalOpen, setIsModalOpen] = useState(false);
    // ----------- Custom ------------
    const [loading, setLoading] = useState(false);
    const [ filter, setFilter ] = useState<"pending" | "approved" | "rejected" | "all">("approved");
    const [selectedId, setSelectedId] = useState<number | null>(null);
    const [showModal, setShowModal] = useState(false);
    const [pendingChallan, setpendingChallan] = useState(0);
    const [approvedChallan, setapprovedChallan] = useState(0);
    const [rejectedChallan, setrejectedChallan] = useState(0);
    const [state, setState] = useState<State[]>([]);
    const [vehicleType, setVehicleType] = useState<Vehicle[]>([]);
    const [partyType, setPartyType] = useState<Party[]>([]);
    const [district, setDistrict] = useState<District[]>([]);
    const [gstState, setGSTState] = useState<State[]>([]);
    const [gstDistrict, setGSTDistrict] = useState<District[]>([]);
    const [dropdownOptions, setDropdownOptions] = useState<any[]>([]);
    const [dropdown, setDropdown] = useState<any[]>([]);
    const [challanData, setChallanData] = useState<ChallanFormData>({
        ChallanNo: '',
        ChallanModule: '',
        financialYear: '2025-2026',
        autoGenerated: true,
        dateTime: moment().format('YYYY-MM-DD HH:mm:ss'),
        paymentType: "cash",

        consignee: '',
        address: '',
        state: 0,
        district: 0,
        pin: '',
        contact: '',
        emailId: '',

        advAmount: 0,
        vehicleType: 0,
        vehicleNo: '',
        vehicleRemarks: '',
        driverName: '',
        driverNumber: 0,

        gstBill: false,
        gstNumber: '',
        Party: 0,
        gstName: '',
        gstAddress: '',
        gstState: 0,
        gstDistrict: 0,
        gstPin: '',

        endUser: true,
        dealer: false,
        balance: 0,
        limit: 0,

        productDetails: [
            {
                id: '',
                name: '',
                productName: '',
                rate: 0,
                grossWeight: 0,
                netWeight: 0,
                lessWeight: 0,
                gtWeight: 0,
                amount: 0,
                dateTime: moment().format('YYYY-MM-DD HH:mm:ss'),
            }
        ],
        weightDetails: {
            tareWeight: 0,
            dateTime: '',
            netWeight: 0,
            lessWeight: 0,
            totalGTWeight: 0,
            vehicleCommission: 0,
        },

        amount: 0,
        loading: 0,
        commission: 0,
        total: 0,
        gstAmount: 0,
        royalty: 0,
        tpAmount: 0,
        freightAmt: 0,
        extraAmt: 0,
        grandTotal: 0,
    });
    const [challanItems, setChallanItems] = useState<ChallanItem[]>([]);
    const handleOpenModal = () => {
        setIsModalOpen(true);
    };

    const handleCloseModal = () => {
        setIsModalOpen(false);
    };

    const Columns = [
        {
            name: 'Actions',
            cell: (row: ChallanTableItem) => (
                <FaEdit className="text-blue-600 cursor-pointer" size={20} />
            ),
        },
        {
            name: 'Challan No',
            selector: (row: ChallanTableItem) => row.ChallanNo,
            sortable: true,
            cell: (row: ChallanTableItem) => (
                <span className="font-medium">{row.ChallanNo}</span>
            ),
        },
        {
            name: 'Challan Date',
            selector: (row: ChallanTableItem) => row.ChallanDate,
            sortable: true,
            cell: (row: ChallanTableItem) => (
                <span>{row.ChallanDate}</span>
            ),
        },
        {
            name: 'Voucher Type',
            selector: (row: ChallanTableItem) => row.VoucherType,
            sortable: true,
            cell: (row: ChallanTableItem) => (
                <span className="font-medium">{row.VoucherType}</span>
            ),
        },
        {
            name: 'Advance Amt',
            selector: (row: ChallanTableItem) => row.AdvAmt,
            sortable: true,
            cell: (row: ChallanTableItem) => (
                <span className="font-medium">{row.AdvAmt}</span>
            ),
        },
        {
            name: 'Party',
            selector: (row: ChallanTableItem) => row.Party,
            sortable: true,
            cell: (row: ChallanTableItem) => (
                <span className="font-medium">{row.Party}</span>
            ),
        },
        {
            name: 'Party ID',
            selector: (row: ChallanTableItem) => row.PartyID,
            sortable: true,
            cell: (row: ChallanTableItem) => (
                <span className="font-medium">{row.PartyID}</span>
            ),
        },
        {
            name: 'OwnerMobile',
            selector: (row: ChallanTableItem) => row.OwnerMobile,
            sortable: true,
            cell: (row: ChallanTableItem) => (
                <span className="font-medium">{row.OwnerMobile}</span>
            ),
        },
        {
            name: 'DriverName',
            selector: (row: ChallanTableItem) => row.DriverName,
            sortable: true,
            cell: (row: ChallanTableItem) => (
                <span className="font-medium">{row.DriverName}</span>
            ),
        },
        {
            name: 'Driver Mobile No',
            selector: (row: ChallanTableItem) => row.DriverMobileNo,
            sortable: true,
            cell: (row: ChallanTableItem) => (
                <span className="text-sm text-gray-600">{row.DriverMobileNo}</span>
            ),
        },
        {
            name: 'Vehicle No',
            selector: (row: ChallanTableItem) => row.VehicleNo,
            sortable: true,
            cell: (row: ChallanTableItem) => (
                <span className="text-sm text-gray-600">{row.VehicleNo}</span>
            ),
        },
        {
            name: 'Vehicle Type Id',
            selector: (row: ChallanTableItem) => row.VehicleTypeid,
            sortable: true,
            cell: (row: ChallanTableItem) => (
                <span className="font-mono text-sm">{row.VehicleTypeid}</span>
            ),
        },
        {
            name: 'Vehicle Remarks',
            selector: (row: ChallanTableItem) => row.VehicleRemarks,
            sortable: true,
            cell: (row: ChallanTableItem) => (
                <span className="font-medium">{row.VehicleRemarks}</span>
            ),
        },
        {
            name: 'Address',
            selector: (row: ChallanTableItem) => row.Address,
            sortable: true,
            cell: (row: ChallanTableItem) => (
                <span className="text-right">{row.Address}</span>
            ),
        },
        {
            name: 'Product Id',
            selector: (row: ChallanTableItem) => row.Productid,
            sortable: true,
            cell: (row: ChallanTableItem) => (
                <span className="text-right">{row.Productid}</span>
            ),
        },
        {
            name: 'IsGST',
            selector: (row: ChallanTableItem) => row.IsGST,
            sortable: true,
            cell: (row: ChallanTableItem) => (
                <span className="text-right">{row.IsGST}</span>
            ),
        },
        {
            name: 'BillName',
            selector: (row: ChallanTableItem) => row.BillName,
            sortable: true,
            cell: (row: ChallanTableItem) => (
                <span className="text-right font-semibold">{row.BillName}</span>
            ),
        },
        {
            name: 'GstNo',
            selector: (row: ChallanTableItem) => row.GstNo,
            sortable: true,
            cell: (row: ChallanTableItem) => (
                <span className="text-right">{row.GstNo}</span>
            ),
        },
        {
            name: 'State',
            selector: (row: ChallanTableItem) =>  {
                const states = state.find(mg => mg.ID === row.state);
                return states ? states.Description : 'Unknown';
            },
            sortable: true,
            cell: (row: ChallanTableItem) => (
                <span className="text-right">{row.State}</span>
            ),
        },
        {
            name: 'Gst Address',
            selector: (row: ChallanTableItem) => row.GstAddress,
            sortable: true,
            cell: (row: ChallanTableItem) => (
                <span className="text-right">{row.GstAddress}</span>
            ),
        },
        {
            name: 'Rate',
            selector: (row: ChallanTableItem) => row.Rate,
            sortable: true,
            cell: (row: ChallanTableItem) => (
                <span className="text-right">{row.Rate}</span>
            ),
        },
        {
            name: 'Amount',
            selector: (row: ChallanTableItem) => row.Amount,
            sortable: true,
            cell: (row: ChallanTableItem) => (
                <span className="text-right">{row.Amount}</span>
            ),
        },
        {
            name: 'LoadingAmt',
            selector: (row: ChallanTableItem) => row.LoadingAmt,
            sortable: true,
            cell: (row: ChallanTableItem) => (
                <span className="text-right">{row.LoadingAmt}</span>
            ),
        },
        {
            name: 'Commision Amount',
            selector: (row: ChallanTableItem) => row.CommisionAmt,
            sortable: true,
            cell: (row: ChallanTableItem) => (
                <span className="text-right">{row.CommisionAmt}</span>
            ),
        },
        {
            name: 'Total Amount',
            selector: (row: ChallanTableItem) => row.TotalAmt,
            sortable: true,
            cell: (row: ChallanTableItem) => (
                <span className="text-right">{row.TotalAmt}</span>
            ),
        },
        {
            name: 'GST Amount',
            selector: (row: ChallanTableItem) => row.GSTAmt,
            sortable: true,
            cell: (row: ChallanTableItem) => (
                <span className="text-right">{row.GSTAmt}</span>
            ),
        },
        {
            name: 'Royalty Amount',
            selector: (row: ChallanTableItem) => row.RoyaltyAmount,
            sortable: true,
            cell: (row: ChallanTableItem) => (
                <span className="text-right">{row.RoyaltyAmount}</span>
            ),
        },
        {
            name: 'TP Amount',
            selector: (row: ChallanTableItem) => row.TPAmount,
            sortable: true,
            cell: (row: ChallanTableItem) => (
                <span className="text-right">{row.TPAmount}</span>
            ),
        },
        {
            name: 'Freight Amount',
            selector: (row: ChallanTableItem) => row.FreightAmt,
            sortable: true,
            cell: (row: ChallanTableItem) => (
                <span className="text-right">{row.FreightAmt}</span>
            ),
        },
        {
            name: 'GTotal',
            selector: (row: ChallanTableItem) => row.GTotal,
            sortable: true,
            cell: (row: ChallanTableItem) => (
                <span className="text-right">{row.GTotal}</span>
            ),
        },
        {
            name: 'Grossweight',
            selector: (row: ChallanTableItem) => row.Grossweight,
            sortable: true,
            cell: (row: ChallanTableItem) => (
                <span className="text-right">{row.Grossweight}</span>
            ),
        },
        {
            name: 'TareWeight',
            selector: (row: ChallanTableItem) => row.TareWeight,
            sortable: true,
            cell: (row: ChallanTableItem) => (
                <span className="text-right">{row.TareWeight}</span>
            ),
        },
        {
            name: 'Netweight',
            selector: (row: ChallanTableItem) => row.Netweight,
            sortable: true,
            cell: (row: ChallanTableItem) => (
                <span className="text-right">{row.Netweight}</span>
            ),
        },
        {
            name: 'Lessweight',
            selector: (row: ChallanTableItem) => row.Lessweight,
            sortable: true,
            cell: (row: ChallanTableItem) => (
                <span className="text-right">{row.Lessweight}</span>
            ),
        },
        {
            name: 'GTWeight',
            selector: (row: ChallanTableItem) => row.GTWeight,
            sortable: true,
            cell: (row: ChallanTableItem) => (
                <span className="text-right">{row.GTWeight}</span>
            ),
        },
        {
            name: 'Financial Year',
            selector: (row: ChallanTableItem) => row.financialYear,
            sortable: true,
            cell: (row: ChallanTableItem) => (
                <span className="text-right">{row.financialYear}</span>
            ),
        },
        {
            name: 'Paytype',
            selector: (row: ChallanTableItem) => row.paytype,
            sortable: true,
            cell: (row: ChallanTableItem) => (
                <span className="text-right">{row.paytype}</span>
            ),
        },
        {
            name: 'Email',
            selector: (row: ChallanTableItem) => row.Email,
            sortable: true,
            cell: (row: ChallanTableItem) => (
                <span className="text-right">{row.Email}</span>
            ),
        },
        {
            name: 'Status Reason',
            selector: (row: ChallanTableItem) => row.StatusReason,
            sortable: true,
            cell: (row: ChallanTableItem) => (
                <span className="text-right">{row.StatusReason}</span>
            ),
        },
        {
            name: 'Taredate',
            selector: (row: ChallanTableItem) => row.Taredate,
            sortable: true,
            cell: (row: ChallanTableItem) => (
                <span className="text-right">{ getShowingDateText(row.Taredate)}</span>
            ),
        },
        {
            name: 'Grossdate',
            selector: (row: ChallanTableItem) => row.Grossdate,
            sortable: true,
            cell: (row: ChallanTableItem) => (
                <span className="text-right">{ getShowingDateText(row.Grossdate)}</span>
            ),
        },
        {
            name: 'Extra Amount',
            selector: (row: ChallanTableItem) => row.ExtraAmt,
            sortable: true,
            cell: (row: ChallanTableItem) => (
                <span className="text-right">{row.ExtraAmt}</span>
            ),
        },
        {
            name: 'Extra Amount Type',
            selector: (row: ChallanTableItem) => row.ExtraAmtType,
            sortable: true,
            cell: (row: ChallanTableItem) => (
                <span className="text-right">{row.ExtraAmtType}</span>
            ),
        },
        {
            name: 'ProductId',
            selector: (row: ChallanTableItem) => row.ProductId1,
            sortable: true,
            cell: (row: ChallanTableItem) => (
                <span className="text-right">{row.ProductId1}</span>
            ),
        },
        {
            name: 'Amount',
            selector: (row: ChallanTableItem) => row.amount,
            sortable: true,
            cell: (row: ChallanTableItem) => (
                <span className="text-right font-semibold text-green-600">
                    ₹{row.amount?.toLocaleString() || 'N/A'}
                </span>
            ),
        },
        {
            name: 'Rate',
            selector: (row: ChallanTableItem) => row.rate,
            sortable: true,
            cell: (row: ChallanTableItem) => (
                <span className="text-right font-mono">
                    ₹{row.rate?.toFixed(2) || 'N/A'}
                </span>
            ),
        },
        {
            name: 'Status',
            selector: (row: ChallanTableItem) => row.Status,
            sortable: true,
            cell: (row: ChallanTableItem) => (
                <span className={`maintenance-type-badge ${row.Status === 'Pending' ? 'maintenance-type-badge-success' : 'maintenance-type-badge-error'}`}>
                    {row.Status === 'Pending' ? 'Pending' : 'Approved'}
                </span>
            )
        },
        {
            name: 'Created Date',
            selector: (row: ChallanTableItem) => getShowingDateText(row.CreatedDate),
            sortable: true,
        },
        {
            name: 'Last Modified',
            selector: (row: ChallanTableItem) => getShowingDateText(row.UpdatedDate),
            sortable: true,
        },
    ];
    
    // ---------------Get-Data------------------
    const getChallanItem = async () => {
        try {
            setLoading(true);  
            const payload = {
                CompanyId: Number(localStorage.getItem("companyID")),
                IsForApproval: '',
                CreatedDatefrom: '',
                CreatedDateTo: '',
                IsRejetc: ''
            }
            const response = await fetchPostData('Challan/GetData_Challan', payload);
            // console.log(response);
            
            if(response){
                setChallanItems(response);           
            }
            } catch (error: any) {
                setChallanItems([]);
            } finally {
                setLoading(false);
            }
    };

    const insertChallan = async (formData: any) => {
        try {
            const payload = {
                ...challanData,
                CompanyId: dropdown.map(opt => opt.value).toString() || localStorage.getItem("companyID"),
                // MaterialTypeID: challanData. || "", 
                };
    
                const response = await fetchPostData("Challan/Insert_Challan", payload);
                const message = response[0].Message;
    
                if (message === "Already Exists MaterialSubTypeCode") {
                    toastifyError("Code is already Present");
                    return;
                }
    
                if (message === "Already Exists Description") {
                    toastifyError("Description is already Present");
                    return;
                }

    
                if (response) {
                    toastifySuccess("Material Type added successfully");
                    await getChallanItem();
                    await fetchCounts();
                    return true;
                } else {
                    throw new Error('Invalid response from server');
                }
                return true;
            } catch (error: any) {
                toastifyError(`Error adding material type: ${error.message}`);
                return false;
            }
    };

    const fetchCounts = async () => {
        try {
            const payload = {
                CompanyId: Number(localStorage.getItem("companyID")),
                IsForApproval: '1',
                CreatedDatefrom: '',
                CreatedDateTo: '',
                IsRejetc: '1'
            }
            const [isPending, isApproved, isRejected] = await Promise.all([
                fetch_Post_Data('Challan/GetData_Challan', payload),
                fetch_Post_Data('Challan/GetData_Challan', payload),
                fetch_Post_Data('Challan/GetData_Challan', payload),
            ]);
        
            setpendingChallan(Array.isArray(isPending?.Data) ? isPending.Data.length : 0);
            setapprovedChallan(Array.isArray(isApproved?.Data) ? isApproved.Data.length : 0);
            setrejectedChallan(Array.isArray(isRejected?.Data) ? isRejected.Data.length : 0);
        } catch (err) {
            toastifyError("Error fetching counts");
        }
    };
        
    useEffect(() => {
        getChallanItem();
        fetchCounts();
    }, [filter]);

    const handleAddProductRow = () => {
      if(challanData.productDetails.length >= 3) return;

      const newRow = {
        productName: '',
        rate: 0,
        grossWeight: 0,
        netWeight: 0,
        lessWeight: 0,
        gtWeight: 0,
        amount: 0,
        dateTime: moment().format('YYYY-MM-DD HH:mm:ss'),
      }
      setChallanData((prev) => ({
        ...prev,
        productDetails: [...prev.productDetails, newRow ],
      }))
    }

    const handleProductChange = (index: number, field: string, value: any) => {
    setChallanData((prev) => {
    const updatedProducts = [...prev.productDetails];
    updatedProducts[index] = {
      ...updatedProducts[index],
      [field]: value,
    };

    // Auto-calculate GT Weight and Amount
    if (['rate', 'netWeight', 'lessWeight'].includes(field)) {
      const rate = Number(updatedProducts[index].rate) || 0;
      const netWeight = Number(updatedProducts[index].netWeight) || 0;
      const lessWeight = Number(updatedProducts[index].lessWeight) || 0;

      const gtWeight = netWeight - lessWeight;
      const amount = gtWeight * rate;

      updatedProducts[index].gtWeight = gtWeight;
      updatedProducts[index].amount = amount;
    }

    return { ...prev, productDetails: updatedProducts };
  });
    };
    //----------------------Dropdowns-----------------------
    const fetchState = async() => {
        try{
            const response = await fetchPostData('State/GetDataDropDown_State', {
                CompanyId: Number(localStorage.getItem('companyID')),
            });
            // console.log(state[0]);

            if(response && Array.isArray(response)){
                setState(response);
                setGSTState(response);
            }
        }catch{
             toastifyError('Error fetching States');
        }
    }

    const fetchDistrict = async(stateID : number | string) => {
        try{
            const response = await fetchPostData('District/GetDataDropDown_District', {
                StateId: stateID,
                CompanyId: Number(localStorage.getItem('companyID')),
            })
            console.log(response);
            if(response && Array.isArray(response)){
                setDistrict(response);
                setGSTDistrict(response);
            }else{
                setDistrict([]);
            }
        }catch{
            toastifyError('Error fetching District');
        }
    }

    const fetchVehicleType = async() => {
        try{
            const response = await fetchPostData('VehicleType/GetDataDropDown_VehicleType', {
                CompanyId: Number(localStorage.getItem('companyID'))
            })
            // console.log(response);
            if(response && Array.isArray(response)){
                setVehicleType(response);
            }else{
                setVehicleType([]);
            }
        }catch{
            toastifyError('Error fetching Vehicle Type.');
        }
    }

    const fetchParty = async() => {
        try{
            const response = await fetchPostData('Party/GetDataDropDown_Party', {
                CompanyId: Number(localStorage.getItem('companyID'))
            })
            console.log(response);
            if(response && Array.isArray(response)){
                setPartyType(response);
            }else{
                setPartyType([]);
            }
        }catch{
             toastifyError('Error fetching Party Type.');
        }
    }

    const fetchTPAmount = async() => {
    //   const response = await fetchPostData('TpAmount/GetDataDropDown_TpAmount')
    }
    useEffect(() => {
      fetchState();
    //   fetchDistrict(state);
      fetchVehicleType();
      fetchParty();
    }, []);

    useEffect(() => {
        const fetchDropDown = async () => {
            try {
                const payload = { EmployeeID: localStorage.getItem("employeeID") };
                const response = await fetchPostData('Users/GetData_Company', payload);
                // console.log(response);
                if (response) {
                    const data = response;
                    setDropdownOptions(Array.isArray(data) ? data : []);
                } else {
                    toastifyError("Failed to load Dropdown.")
                }
                } catch (error: any) {
                    toastifyError("Error fetching Dropdown");
                }
            }
            fetchDropDown();
    }, []);
    
    const options = dropdownOptions.map(opt => ({
        value: opt.CompanyID,
        label: opt.CompanyName
    }));

    // Demo challan history data
    const [challanHistory] = useState([
        {
            id: 'CHN001',
            challanNo: 'S/2025-2026/001',
            date: '2025-07-24',
            time: '09:30:00',
            consignee: 'ABC Construction Ltd.',
            vehicleNo: 'MH12AB1234',
            driverName: 'Rajesh Kumar',
            productName: 'Crushed Stone',
            quantity: 15.5,
            amount: 125000,
            status: 'Completed',
            paymentType: 'Cash'
        },
        {
            id: 'CHN002',
            challanNo: 'S/2025-2026/002',
            date: '2025-07-24',
            time: '11:15:00',
            consignee: 'XYZ Builders Pvt Ltd',
            vehicleNo: 'MH14CD5678',
            driverName: 'Suresh Patil',
            productName: 'River Sand',
            quantity: 12.0,
            amount: 85000,
            status: 'In Transit',
            paymentType: 'Credit'
        },
        {
            id: 'CHN003',
            challanNo: 'S/2025-2026/003',
            date: '2025-07-23',
            time: '14:45:00',
            consignee: 'Metro Infrastructure',
            vehicleNo: 'MH16EF9012',
            driverName: 'Amit Sharma',
            productName: 'Gravel',
            quantity: 18.2,
            amount: 95000,
            status: 'Completed',
            paymentType: 'Cash'
        },
        {
            id: 'CHN004',
            challanNo: 'S/2025-2026/004',
            date: '2025-07-23',
            time: '16:20:00',
            consignee: 'Sai Construction',
            vehicleNo: 'MH18GH3456',
            driverName: 'Vikram Singh',
            productName: 'M-Sand',
            quantity: 20.0,
            amount: 110000,
            status: 'approved',
            paymentType: 'Credit'
        },
        {
            id: 'CHN005',
            challanNo: 'S/2025-2026/005',
            date: '2025-07-22',
            time: '10:30:00',
            consignee: 'Royal Developers',
            vehicleNo: 'MH20IJ7890',
            driverName: 'Mahesh Yadav',
            productName: 'Crushed Stone',
            quantity: 16.8,
            amount: 135000,
            status: 'Completed',
            paymentType: 'Cash'
        },
        {
            id: 'CHN006',
            challanNo: 'S/2025-2026/006',
            date: '2025-07-22',
            time: '13:15:00',
            consignee: 'Green Build Solutions',
            vehicleNo: 'MH22KL2345',
            driverName: 'Ravi Desai',
            productName: 'River Sand',
            quantity: 14.5,
            amount: 98000,
            status: 'In Transit',
            paymentType: 'Credit'
        },
        {
            id: 'CHN007',
            challanNo: 'S/2025-2026/007',
            date: '2025-07-21',
            time: '08:45:00',
            consignee: 'Prime Infrastructure',
            vehicleNo: 'MH24MN6789',
            driverName: 'Deepak Joshi',
            productName: 'Aggregate',
            quantity: 22.1,
            amount: 155000,
            status: 'Completed',
            paymentType: 'Cash'
        },
        {
            id: 'CHN008',
            challanNo: 'S/2025-2026/008',
            date: '2025-07-21',
            time: '15:30:00',
            consignee: 'Skyline Constructions',
            vehicleNo: 'MH26OP0123',
            driverName: 'Santosh Pawar',
            productName: 'Stone Chips',
            quantity: 19.3,
            amount: 142000,
            status: 'Completed',
            paymentType: 'Credit'
        },
        {
            id: 'CHN009',
            challanNo: 'S/2025-2026/009',
            date: '2025-07-20',
            time: '11:00:00',
            consignee: 'Unity Builders',
            vehicleNo: 'MH28QR4567',
            driverName: 'Ganesh Kulkarni',
            productName: 'Crushed Stone',
            quantity: 17.6,
            amount: 128000,
            status: 'Cancelled',
            paymentType: 'Cash'
        },
        {
            id: 'CHN010',
            challanNo: 'S/2025-2026/010',
            date: '2025-07-20',
            time: '17:15:00',
            consignee: 'Modern Contractors',
            vehicleNo: 'MH30ST8901',
            driverName: 'Pravin Jadhav',
            productName: 'M-Sand',
            quantity: 21.4,
            amount: 118000,
            status: 'Completed',
            paymentType: 'Credit'
        }
    ]);

    // Filter states for history
    const [historyFilters, setHistoryFilters] = useState({
        searchTerm: '',
        dateFrom: '',
        dateTo: '',
        status: '',
        paymentType: '',
        consignee: ''
    });

    // Filtered history data
    const filteredHistory: any = challanHistory.filter(challan => {
        const matchesSearch = challan.challanNo.toLowerCase().includes(historyFilters.searchTerm.toLowerCase()) ||
            challan.consignee.toLowerCase().includes(historyFilters.searchTerm.toLowerCase()) ||
            challan.vehicleNo.toLowerCase().includes(historyFilters.searchTerm.toLowerCase()) ||
            challan.driverName.toLowerCase().includes(historyFilters.searchTerm.toLowerCase());

        const matchesDateFrom = !historyFilters.dateFrom || challan.date >= historyFilters.dateFrom;
        const matchesDateTo = !historyFilters.dateTo || challan.date <= historyFilters.dateTo;
        const matchesStatus = !historyFilters.status || challan.status === historyFilters.status;
        const matchesPaymentType = !historyFilters.paymentType || challan.paymentType === historyFilters.paymentType;
        const matchesConsignee = !historyFilters.consignee || challan.consignee.toLowerCase().includes(historyFilters.consignee.toLowerCase());

        return matchesSearch && matchesDateFrom && matchesDateTo && matchesStatus && matchesPaymentType && matchesConsignee;
    });

    const selectCompactStyles: any = {
        control: (provided: any) => ({
            ...provided,
            minHeight: "33px",
            height: "33px",
            fontSize: "14px",
            padding: "0 2px",
        }),
        valueContainer: (provided: any) => ({
            ...provided,
            padding: "0 6px",
        }),
        indicatorsContainer: (provided: any) => ({
            ...provided,
            padding: "0 6px",
        }),
        dropdownIndicator: (provided: any) => ({
            ...provided,
            padding: "0 6px",
        }),
        clearIndicator: (provided: any) => ({
            ...provided,
            padding: "0 6px",
        }),
    };

    const resizeableColumns = useResizableColumns(Columns).map(col => ({
        ...col,
        minWidth: typeof col.minWidth === "number" ? `${col.minWidth}px` : col.minWidth
    }));
    
    //Download-Excel_File
    const exportToExcel = () => {
        // const filteredDataNew = challanItems?.map(item => ({
        //     'Material-Sub Type Code': item.MaterialSubTypeCode,
        //     'Description': item.Description,
        //     'Material Type': item.MaterialTypeID,
        //     'Status': item.IsActive ? 'Active' : 'Inactive',
        //     'Created Date': item.CreatedDate ? getShowingDateText(item.CreatedDate) : " ",
        //     'Last Modified': item.UpdatedDate ? getShowingDateText(item.UpdatedDate) : " ",
        // }));
        const wb = XLSX.utils.book_new();
        const ws = XLSX.utils.json_to_sheet(filteredDataNew);
        XLSX.utils.book_append_sheet(wb, ws, 'Sheet1');
        const wbout = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });
        const blob = new Blob([wbout], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = 'data.xlsx';
        a.click();
        window.URL.revokeObjectURL(url);
    }

    return (
        <>
            <main className="dashboard-main ">
                <div className="main-content-area ">
                    <div className="main-content-wrapper mt-5 ">
                        <div className="relative lg:mt-8 mb-3">
                            <div className="py-3 employee-create-challan-card flex flex-wrap items-end gap-4 w-full" >
                                <div className="flex items-center gap-2">
                                    <label className=" whitespace-nowrap employee-master-metric-label">From :</label>
                                    <DatePicker selected={new Date('2025-07-23')}
                                        onChange={(date: Date | null) => console.log(date)}
                                        className="border rounded px-2 py-1 w-[60px]"
                                        dateFormat="yyyy-MM-dd"
                                    />

                                    <DatePicker selected={new Date('2025-07-23T00:00:00')}
                                        onChange={(date: Date | null) => console.log(date)}
                                        showTimeSelect
                                        showTimeSelectOnly
                                        timeIntervals={15}
                                        timeCaption="Time"
                                        dateFormat="HH:mm"
                                        className="border rounded px-2 py-1 w-[60px]"
                                    />

                                    <label className=" whitespace-nowrap ml-4 employee-master-metric-label">To :</label>
                                    <DatePicker selected={new Date('2025-07-23')}
                                        onChange={(date: Date | null) => console.log(date)}
                                        className="border rounded px-2 py-1 w-[60px]"
                                        dateFormat="yyyy-MM-dd"
                                    />
                                    <DatePicker selected={new Date('2025-07-23T19:35:00')}
                                        onChange={(date: Date | null) => console.log(date)}
                                        showTimeSelect
                                        showTimeSelectOnly
                                        timeIntervals={15}
                                        timeCaption="Time"
                                        dateFormat="HH:mm"
                                        className="border rounded px-2 py-1 w-[60px]"
                                    />
                                </div>

                                <div className="flex items-center gap-2 ml-6">
                                    <label className=" whitespace-nowrap employee-master-metric-label">Consignee :</label>
                                    <Select
                                        className="w-[200px]"
                                        placeholder="Select Consignee"
                                        options={[
                                            { value: 'ABC', label: 'ABC' },
                                            { value: 'XYZ', label: 'XYZ' },
                                            { value: 'ABC Construction Ltd.', label: 'ABC Construction Ltd.' },
                                            { value: 'XYZ Builders Pvt Ltd', label: 'XYZ Builders Pvt Ltd' }
                                        ]}
                                        isClearable
                                        isSearchable
                                        styles={{
                                            control: (provided) => ({
                                                ...provided,
                                                minHeight: '32px',
                                                fontSize: '14px',
                                            }),
                                        }}
                                    />
                                </div>

                                <div className="flex justify-between items-center w-full">
                                  <div className="flex flex-row-reverse items-center gap-2" >
                                    <button onClick={() => setShowInput(!showInput)} className="text-gray-600 border rounded p-2 hover:bg-gray-100 transition flex items-center gap-2">
                                        <FiSearch size={18} />
                                        Search
                                    </button>
                                    {showInput && (
                                        <div className="relative">
                                            <input type="text" placeholder="Search challans..."
                                                className="border rounded px-3 py-2 pr-8 w-[400px] transition-all focus:border-blue-500 focus:outline-none"
                                                autoFocus
                                            />
                                            <FiSearch className="absolute right-2 top-1/2 transform -translate-y-1/2 text-gray-400" size={16} />
                                        </div>
                                    )}
                                  </div>
                                  <div className="flex">
                                    <button type="button" onClick={exportToExcel} className="btn btn-sm btn-primary bg-[#3b82f6]  py-1 h-9 px-2 mt-2 flex items-center gap-1">
                                        <i className="fa fa-file-excel-o" aria-hidden="true"></i> Export to Excel
                                    </button>
                                  </div>
                                </div>
                            </div>
                        </div>

                        <div className="employee-master-space-y-2">
                            {/* Employee Summary Cards */}
                            <div className="employee-master-summary-grid ">
                                <div className="employee-master-summary-card cursor-pointer" onClick={() => setFilter("pending")}>
                                    <div className="employee-master-summary-content">
                                        <div className="employee-master-summary-item">
                                            <div className="employee-master-icon-container employee-master-icon-blue">
                                                <UsersIcon />
                                            </div>
                                            <div>
                                                <p className="employee-master-metric-label">Pending Challan</p>
                                                <p className="employee-master-metric-value employee-master-metric-blue">{pendingChallan}</p>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <div className="employee-master-summary-card cursor-pointer" onClick={() => setFilter("approved")}>
                                    <div className="employee-master-summary-content">
                                        <div className="employee-master-summary-item">
                                            <div className="employee-master-icon-container employee-master-icon-green">
                                                <CheckCircleIcon />
                                            </div>
                                            <div>
                                                <p className="employee-master-metric-label">Approved Challan</p>
                                                <p className="employee-master-metric-value employee-master-metric-green">
                                                    {approvedChallan}
                                                </p>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <div className="employee-master-summary-card cursor-pointer" onClick={() => setFilter("rejected")}>
                                    <div className="employee-master-summary-content">
                                        <div className="employee-master-summary-item">
                                            <div className="employee-master-icon-container employee-master-icon-purple">
                                                <TrendingUpIcon />
                                            </div>
                                            <div>
                                                <p className="employee-master-metric-label">Rejected Challan</p>
                                                <p className="employee-master-metric-value employee-master-metric-purple">
                                                    {rejectedChallan}
                                                </p>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <div className="employee-master-summary-card cursor-pointer" onClick={() => setFilter("all")}>
                                    <div className="employee-master-summary-content">
                                        <div className="employee-master-summary-item">
                                            <div className="employee-master-icon-container employee-master-icon-yellow">
                                                <ClockIcon />
                                            </div>
                                            <div>
                                                <p className="employee-master-metric-label">Total Challan</p>
                                                <p className="employee-master-metric-value employee-master-metric-yellow">
                                                    {pendingChallan + approvedChallan + rejectedChallan}
                                                </p>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            {/* Employee List Table */}
                            <div className="employee-master-card">
                                <div className="employee-master-card-header mt-2 flex justify-end">
                                    <button className="employee-master-button employee-master-button-primary employee-master-button-sm" onClick={handleOpenModal} >
                                        <PlusIcon /> Add Challan
                                    </button>
                                </div>
                                <div className="employee-master-card-content" style={{ padding: '0' }}>
                                    <DataTable
                                        columns={resizeableColumns}
                                        data={challanItems}
                                        pagination
                                        paginationPerPage={10}
                                        paginationRowsPerPageOptions={[5, 10, 20, 50]}
                                        highlightOnHover
                                        customStyles={customStyles}
                                        striped
                                        responsive
                                        noDataComponent={
                                            <div className="text-center py-8 text-gray-500">
                                                No challan records found
                                            </div>
                                        }
                                    />
                                </div>
                            </div>
                        </div>

                        {isModalOpen && (
                            <div className="modal-overlay">
                                <div className="modal-content">
                                    {/* Modal Header */}
                                    <div className="modal-header">
                                        <div className="content-top-nav  ">
                                            <ul>
                                                <li><a className="active" href="#">Challan{" "}</a></li>
                                                <li><a href="#">TP</a></li>
                                                <li> <a href="#">BILL</a></li>
                                            </ul>
                                        </div>
                                        <button onClick={handleCloseModal} className="text-gray-600 hover:text-red-500 p-2">
                                            <FiX size={20} />
                                        </button>
                                    </div>

                                    {/* Modal Body */}
                                    <div className="modal-body p-2">
                                        <div className="row align-items-center">

                                            <div className="col-xl-5">
                                                <div className="d-flex align-items-center gap-2">
                                                    <label htmlFor="product-desc" className="mb-0" style={{ minWidth: 70 }} >
                                                        Challan#
                                                    </label>
                                                    <div className="product-des-input d-flex gap-2 flex-grow-1">
                                                        <input type="text" id="product-desc-1" placeholder='Challan-No' style={{ flex: 1 }} value={challanData.ChallanNo} onChange={(e) => setChallanData({...challanData, ChallanNo: e.target.value})} />
                                                        <input type="text" id="date-pick-bano" placeholder='Challan-Module' style={{ flex: 1 }}  value={challanData.ChallanModule} onChange={(e) => setChallanData({...challanData, ChallanModule: e.target.value})}/>
                                                        <input type="text" id="product-desc-bano-<?=uniqid()?>" defaultValue="Auto Generated" style={{ flex: 1 }} disabled={true} />
                                                    </div>
                                                </div>
                                            </div>
                                            <div className="col-xl-3 mt-3 mt-xl-0">
                                                <div className="d-flex align-items-center gap-2">
                                                    <label htmlFor="generic-desc" className="mb-0" style={{ minWidth: 70 }}> Date/Time </label>
                                                    <div className="product-des-input flex-grow-1">
                                                        <DatePicker
                                                          selected={moment(challanData.dateTime, "YYYY-MM-DD HH:mm:ss").toDate()} 
                                                          onChange={(date: Date | null) => {
                                                          if (date) {
                                                            const formatted = moment(date).format("YYYY-MM-DD HH:mm:ss"); 
                                                            setChallanData({ ...challanData, dateTime: formatted });
                                                          }}}
                                                          showTimeSelect
                                                          timeIntervals={15}
                                                          timeCaption="Time"
                                                          dateFormat="dd/MM/yyyy HH:mm"
                                                          className="border rounded px-2 py-1 w-full"
                                                        />
                                                    </div>
                                                </div>
                                            </div>
                                            <div className="col-xl-2 mt-3 mt-xl-0">
                                                <div className="d-flex align-items-center gap-2">
                                                    <label className="d-flex align-items-center" style={{ gap: 6 }}>
                                                        <input type="radio" name="paymentType" value="Cash" checked={challanData.paymentType === "cash"} onChange={(e) => setChallanData({...challanData, paymentType: e.target.value})}/>
                                                        Cash
                                                    </label>
                                                    <label className="d-flex align-items-center" style={{ gap: 6, marginLeft: 20 }}>
                                                        <input type="radio" name="paymentType" value="Credit" checked={challanData.paymentType === "credit"} onChange={(e) => setChallanData({ ...challanData, paymentType: e.target.value })}/>{" "}
                                                        Credit
                                                    </label>
                                                </div>
                                            </div>
                                            {/* Button */}
                                            <div className='col-xl-2 mt-3 mt-xl-0  d-flex justify-content-end '>
                                                <div className="flex gap-2 ">
                                                    {/* Save Button */}
                                                    <button
                                                        type="button"
                                                        className="flex items-center gap-2 px-2 py-1 rounded-md text-white"
                                                        style={{ backgroundColor: "#34C759" }}
                                                    >
                                                        <FiSave size={18} />
                                                        Save
                                                    </button>

                                                    {/* Print Button */}
                                                    <button
                                                        type="button"
                                                        className="flex items-center gap-2 px-2 py-1 rounded-md text-white"
                                                        style={{ backgroundColor: "#212529" }}
                                                        onClick={() => window.print()}
                                                    >
                                                        <FiPrinter size={18} />
                                                        Print
                                                    </button>
                                                </div>
                                            </div>

                                            <div className="col-xxl-9 col-12 mt-2">
                                                {/* First-Section */}
                                                <div className="row">
                                                    {/* First-Column */}
                                                    <div className="col-xl-4 col-sm-6">
                                                        <div className="form-block ">
                                                            <div className="row align-items-center" style={{ rowGap: 6 }}>
                                                                {/* Party */}
                                                                <div className="single-info-block col-xl-2">
                                                                    <label htmlFor="SchemeCode">Party</label>
                                                                </div>
                                                                <div className="col-xl-10">
                                                                    <Select
                                                                        className="w-full"
                                                                        placeholder="Select Party"
                                                                        value={ challanData.Party ? {
                                                                            value: challanData.Party,
                                                                            label: partyType.find((d) => d.PartyID === challanData.Party)?.Name || '',
                                                                        } : null}
                                                                        options={partyType.map((d) => ({
                                                                            value: d.PartyID,
                                                                            label: d.Name
                                                                        }))}
                                                                        onChange={(selectedOption: SingleOption<{ value: number, label:string}>) =>
                                                                            setChallanData((prev) => ({
                                                                                ...prev,
                                                                                Party: selectedOption?.value ?? 0
                                                                            }))
                                                                        }
                                                                        isClearable
                                                                        isSearchable
                                                                        styles={selectCompactStyles}
                                                                    />
                                                                </div>
                                                                {/* Address */}
                                                                <div className="single-info-block col-xl-3">
                                                                    <label htmlFor="prType">
                                                                        Address <span>*</span>
                                                                    </label>
                                                                </div>
                                                                <div className="col-xl-9 col-12">
                                                                    <textarea
                                                                        name=""
                                                                        id="prType"
                                                                        className="py-0"
                                                                        style={{ width: "100%" }}
                                                                        placeholder='Address'
                                                                        value={challanData.address}
                                                                        onChange={(e) => setChallanData({...challanData, address: e.target.value})}
                                                                    />
                                                                </div>
                                                                {/* State */}
                                                                <div className="single-info-block col-xl-3">
                                                                    <label htmlFor="ritcNo">State<span>*</span></label>
                                                                </div>
                                                                <div className="col-xl-9 col-12">
                                                                    <Select
                                                                      value={ challanData.state  ? 
                                                                        { value: challanData.state,
                                                                          label: state.find((st) => st.ID === challanData.state)?.Description || "", 
                                                                        } : null
                                                                      }
                                                                        className="w-full"
                                                                        placeholder="Select State"
                                                                        options={state.map((st) => ({
                                                                          value: st.ID,
                                                                          label: st.Description,
                                                                        }))}
                                                                        onChange={(selectedOption: SingleValue<{ value: number; label: string }>) => {
                                                                            const stateID = selectedOption?.value ?? 0;
                                                                            setChallanData((prev) => ({
                                                                                ...prev,
                                                                                state: stateID,
                                                                                district: 0,
                                                                            }));
                                                                            if (stateID) fetchDistrict(stateID);
                                                                        }}
                                                                        isClearable
                                                                        isSearchable
                                                                        styles={selectCompactStyles}
                                                                    />
                                                                </div>
                                                                {/* District */}
                                                                <div className="single-info-block col-xl-3">
                                                                    <label htmlFor="prUnit">District<span>*</span></label>
                                                                </div>
                                                                <div className="col-xl-9 col-12">
                                                                    <Select
                                                                        className="w-full"
                                                                        placeholder="Select District"
                                                                        value={ challanData.district
                                                                            ? {
                                                                            value: challanData.district,
                                                                            label: district.find((d) => d.ID === challanData.district)?.Description || '',
                                                                        } : null
                                                                    }
                                                                    options={district.map((d) => ({
                                                                        value: d.ID,
                                                                        label: d.Description,
                                                                    }))}
                                                                    onChange={(selectedOption: SingleValue<{ value: number; label: string }>) =>
                                                                        setChallanData((prev) => ({
                                                                            ...prev,
                                                                            district: Number(selectedOption?.value ?? 0),
                                                                        }))
                                                                    }
                                                                    isClearable
                                                                    isSearchable
                                                                    styles={selectCompactStyles}
                                                                />
                                                                </div>
                                                                {/* PIN */}
                                                                <div className="single-info-block col-xl-3">
                                                                    <label htmlFor="prUnitPrice">
                                                                        PIN <span>*</span>
                                                                    </label>
                                                                </div>
                                                                <div className="col-xl-9 col-12">
                                                                    <input type="text" id="prAmountUSD" placeholder="Enter PIN" value={challanData.pin} onChange={(e) => setChallanData({...challanData, pin: e.target.value})}/>
                                                                </div>
                                                                {/* Contact */}
                                                                <div className="single-info-block col-xl-3">
                                                                    <label htmlFor="prAmountUSD">Contact</label>
                                                                </div>
                                                                <div className="col-xl-9 col-12">
                                                                    <input type="text" id="prAmountUSD" placeholder='Contact No' value={challanData.contact} onChange={(e) => setChallanData({...challanData, contact: e.target.value})}/>
                                                                </div>
                                                                {/* EmailID */}
                                                                <div className="single-info-block col-xl-3">
                                                                    <label htmlFor="prAmountINR">EmailID</label>
                                                                </div>
                                                                <div className="col-xl-9 col-12">
                                                                    <input type="email" id="prAmountINR" placeholder="Email ID" value={challanData.emailId} onChange={(e) => setChallanData({...challanData, emailId: e.target.value})}/>
                                                                </div>
                                                                {/* ROW */}
                                                            </div>
                                                        </div>
                                                    </div>

                                                    {/* Second-Column */}
                                                    <div className="col-xl-3 col-sm-6  ">
                                                        <div className="form-block ">
                                                            <div className="row align-items-center" style={{ rowGap: 6 }}>
                                                                {/* Adv-Amount */}
                                                                <div className="single-info-block col-xl-5">
                                                                    <label htmlFor="endUse">Adv. Amount <span>*</span></label>
                                                                </div>
                                                                <div className="col-xl-7 col-12">
                                                                    <input type="text" id="endUse" defaultValue={0.0} style={{ width: "100%" }} value={challanData.advAmount} onChange={(e) => setChallanData({...challanData, advAmount: Number(e.target.value)})}/>
                                                                </div>
                                                                {/* Vehicle-type */}
                                                                <div className="single-info-block col-xl-5">
                                                                    <label htmlFor="prCTH">Vehicle Type</label>
                                                                </div>
                                                                <div className="col-xl-7 col-12">
                                                                    <Select
                                                                        className="w-full"
                                                                        placeholder="Select Vehicle"
                                                                        value = { challanData.vehicleType ? 
                                                                            {
                                                                                value: challanData.vehicleType,
                                                                                label: vehicleType.find((d) => d.VehicleTypeID === challanData.vehicleType)?.Description || ''
                                                                            } : null
                                                                        }
                                                                        options={vehicleType.map((d) => ({
                                                                             value: d.VehicleTypeID,
                                                                             label: d.Description
                                                                        }))}
                                                                        onChange={(selectedOptions : SingleValue<{value: number, label: string}>) =>
                                                                            setChallanData((prev) => ({
                                                                                ...prev,
                                                                                vehicleType: Number(selectedOptions?.value ?? 0)
                                                                        }))
                                                                        }
                                                                        isClearable
                                                                        isSearchable
                                                                        styles={selectCompactStyles}
                                                                    />
                                                                </div>
                                                                {/* Vehicle-No */}
                                                                <div className="single-info-block col-xl-5">
                                                                    <label htmlFor="prCET">Vehicle No.</label>
                                                                </div>
                                                                <div className="col-xl-7 col-12">
                                                                  <input type='text' placeholder='Vehicle No' value={challanData.vehicleNo} onChange={(e) => setChallanData({...challanData, vehicleNo: e.target.value})}/>
                                                                </div>
                                                                {/* Driver-Name */}
                                                                <div className="single-info-block col-xl-5">
                                                                    <label htmlFor="prCode">Driver Name</label>
                                                                </div>
                                                                <div className="col-xl-7 col-12">
                                                                    <input type="text" id="prCode" placeholder="Driver Name" style={{ width: "100%" }} value={challanData.driverName} onChange={(e) => setChallanData({...challanData, driverName: e.target.value})}/>
                                                                </div>
                                                                {/* Driver-No */}
                                                                <div className="single-info-block col-xl-5">
                                                                    <label htmlFor="driverNo">Driver Number</label>
                                                                </div>
                                                                <div className="col-xl-7 col-12">
                                                                    <input type="text" id="driverNo" style={{ width: "100%" }} value={challanData.driverNumber} onChange={(e) => setChallanData({...challanData, driverNumber: Number(e.target.value)})}/>
                                                                </div>
                                                                {/* Vehicle-Remark */}
                                                                <div className="single-info-block col-xl-5">
                                                                    <label htmlFor="remark">Vehicle Remarks</label>
                                                                </div>
                                                                <div className="col-xl-7 col-12">
                                                                    <textarea name="" id="remark" className="py-0" style={{ width: "100%" }} value={challanData.vehicleRemarks} onChange={(e) => setChallanData({...challanData, vehicleRemarks: e.target.value})}/>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>

                                                    {/* Third-Column */}
                                                    <div className="col-xl-5 mt-3 mt-xl-0">
                                                        <div className="form-block bigger-form-block">
                                                            <div className="row align-items-center" style={{ rowGap: 6 }}>
                                                                {/* GST-No */}
                                                                <div className="single-info-block col-xl-2">
                                                                    <label htmlFor="gst">GST No</label>
                                                                </div>
                                                                <div className="col-xl-10">
                                                                    <input type="text" id="gst" style={{ width: "100%" }} placeholder='GST No' value={challanData.gstNumber} onChange={(e) => setChallanData({...challanData, gstNumber: e.target.value})}/>
                                                                </div>
                                                                {/* GST Party-Drop */}
                                                                <div className="single-info-block col-xl-2">
                                                                    <label htmlFor="SchemeCode">Party</label>
                                                                </div>
                                                                <div className="col-xl-10">
                                                                    <Select
                                                                        className="w-full"
                                                                        placeholder="Select Party"
                                                                        value={ challanData.Party ? {
                                                                            value: challanData.Party,
                                                                            label: partyType.find((d) => d.PartyID === challanData.Party)?.Name || '',
                                                                        } : null}
                                                                        options={partyType.map((d) => ({
                                                                            value: d.PartyID,
                                                                            label: d.Name
                                                                        }))}
                                                                        onChange={(selectedOption: SingleOption<{ value: number, label:string}>) =>
                                                                            setChallanData((prev) => ({
                                                                                ...prev,
                                                                                Party: selectedOption?.value ?? 0
                                                                            }))
                                                                        }
                                                                        isClearable
                                                                        isSearchable
                                                                        styles={selectCompactStyles}
                                                                    />
                                                                </div>
                                                                {/* GST Address */}
                                                                <div className="single-info-block col-xl-2">
                                                                    <label htmlFor="address">Address</label>
                                                                </div>
                                                                <div className="col-xl-10">
                                                                    <textarea name="" id="address" value={challanData.address}  onChange={(e) => setChallanData({...challanData, address: e.target.value})}/>
                                                                </div>
                                                                {/* GST State */}
                                                                <div className="single-info-block col-xl-2">
                                                                    <label htmlFor="ritcNo">State<span>*</span></label>
                                                                </div>
                                                                <div className="col-xl-10">
                                                                    <Select
                                                                      value={ challanData.gstState  ? 
                                                                        { value: challanData.gstState,
                                                                          label: gstState.find((st) => st.ID === challanData.gstState)?.Description || "", 
                                                                        } : null
                                                                      }
                                                                        className="w-full"
                                                                        placeholder="Select State"
                                                                        options={gstState.map((st) => ({
                                                                          value: st.ID,
                                                                          label: st.Description,
                                                                        }))}
                                                                        onChange={(selectedOption: SingleValue<{ value: number; label: string }>) => {
                                                                            const stateID = selectedOption?.value ?? 0;
                                                                            setChallanData((prev) => ({
                                                                                ...prev,
                                                                                gstState: stateID,
                                                                                district: 0,
                                                                            }));
                                                                            if (stateID) fetchDistrict(stateID);
                                                                        }}
                                                                        isClearable
                                                                        isSearchable
                                                                        styles={selectCompactStyles}
                                                                    />
                                                                </div>
                                                                {/* GST District */}
                                                                <div className="single-info-block col-xl-2">
                                                                    <label htmlFor="prUnit">District<span>*</span></label>
                                                                </div>
                                                                <div className="col-xl-10">
                                                                    <Select
                                                                        className="w-full"
                                                                        placeholder="Select District"
                                                                        value={ challanData.gstDistrict
                                                                            ? {
                                                                            value: challanData.gstDistrict,
                                                                            label: gstDistrict.find((d) => d.ID === challanData.gstDistrict)?.Discription || '',
                                                                        } : null
                                                                    }
                                                                    options={gstDistrict.map((d) => ({
                                                                        value: d.ID,
                                                                        label: d.Discription,
                                                                    }))}
                                                                    onChange={(selectedOption: SingleValue<{ value: number; label: string }>) =>
                                                                        setChallanData((prev) => ({
                                                                            ...prev,
                                                                            gstDistrict: Number(selectedOption?.value ?? 0),
                                                                        }))
                                                                    }
                                                                    isClearable
                                                                    isSearchable
                                                                    styles={selectCompactStyles}
                                                                />
                                                                </div>
                                                                {/* GST PIN */}
                                                                <div className="single-info-block col-xl-2">
                                                                    <label htmlFor="prUnitPrice">PIN <span>*</span></label>
                                                                </div>
                                                                <div className="col-xl-10">
                                                                    <input type="text" id="prAmountUSD" placeholder="Enter PIN" value={challanData.gstPin} onChange={(e) => setChallanData({...challanData,gstPin: e.target.value})}/>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                                {/* Second-Second */}
                                                <div className="col-12 mt-2">
                                                    {/* First-Row */}
                                                    <div className="product-details-table mb-2">
                                                        {challanData.productDetails.map((product, index) => (
                                                            <div key={index} className="product-des-box product-details-form ">
                                                                <div className="product-form-container ">
                                                                    <div className="row g-3 align-items-center mt-2">
                                                                        {/* Product Name */}
                                                                        <div className="col-md-2 mt-0">
                                                                            <label className="MAINTABLE_LABEL">Product Name</label>
                                                                            <input type="text" placeholder="Product Name" value={product.productName} onChange={(e) => handleProductChange(index, 'productName', e.target.value) } />
                                                                        </div>

                                                                        {/* Rate */}
                                                                        <div className="col mt-0" style={{ minWidth: 130 }}>
                                                                            <label className="MAINTABLE_LABEL">Rate</label>
                                                                            <input type="number" value={product.rate} onChange={(e) => handleProductChange(index, 'rate', Number(e.target.value)) } />
                                                                        </div>

                                                                        {/* Gross Weight */}
                                                                        <div className="col mt-0" style={{ minWidth: 130 }}>
                                                                            <label className="MAINTABLE_LABEL">Gross Weight</label>
                                                                            <input type="number" value={product.grossWeight} onChange={(e) => handleProductChange(index, 'grossWeight', Number(e.target.value))}/>
                                                                        </div>

                                                                        {/* Net Weight */}
                                                                        <div className="col mt-0" style={{ minWidth: 130 }}>
                                                                            <label className="MAINTABLE_LABEL">Net Weight</label>
                                                                            <input type="number" value={product.netWeight} onChange={(e) => handleProductChange(index, 'netWeight', Number(e.target.value))}/>
                                                                        </div>

                                                                        {/* Less Weight */}
                                                                        <div className="col mt-0" style={{ minWidth: 150 }}>
                                                                            <label className="MAINTABLE_LABEL">Less Weight</label>
                                                                            <input type="number" value={product.lessWeight} onChange={(e) => handleProductChange(index, 'lessWeight', Number(e.target.value))}/>
                                                                        </div>

                                                                        {/* GT Weight */}
                                                                        <div className="col mt-0" style={{ minWidth: 130 }}>
                                                                            <label className="MAINTABLE_LABEL">GT Weight</label>
                                                                            <input type="number" value={product.gtWeight} readOnly />
                                                                        </div>

                                                                        {/* Amount */}
                                                                        <div className="col mt-0" style={{ minWidth: 130 }}>
                                                                            <label className="MAINTABLE_LABEL">Amount</label>
                                                                            <input type="number" value={product.amount} readOnly />
                                                                        </div>

                                                                        {/* Date/Time */}
                                                                        <div className="col-md-2 mt-0">
                                                                            <label className="MAINTABLE_LABEL">Date/Time</label>
                                                                            <DatePicker selected={moment(product.dateTime, 'YYYY-MM-DD HH:mm:ss').toDate()} onChange={(date: Date | null) => {
                                                                                if (date) {
                                                                                    const formatted = moment(date).format('YYYY-MM-DD HH:mm:ss'); handleProductChange(index, 'dateTime', formatted);
                                                                                }}}
                                                                                showTimeSelect
                                                                                timeIntervals={15}
                                                                                timeCaption="Time"
                                                                                dateFormat="dd/MM/yyyy HH:mm"
                                                                                className="border rounded px-2 py-1 w-full"
                                                                            />
                                                                        </div>

                                                                        {/* Add Button (only on last row, max 3 rows) */}
                                                                        {index === challanData.productDetails.length - 1 && challanData.productDetails.length < 3 && (
                                                                            <div className="col">
                                                                                <button type="button" className="btn btn-warning p-1 py-0" onClick={handleAddProductRow} >
                                                                                    <svg className="text-white" style={{ width: 20, height: 25 }} fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                                                                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6"/>
                                                                                    </svg>
                                                                                </button>
                                                                            </div>
                                                                        )}
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        ))}
                                                    </div>

                                                    {/* Second-Row */}
                                                    <div className="product-details-table mb-2">
                                                        <div className="product-des-box product-details-form ">
                                                            <div className="product-form-container ">
                                                                <div className="row g-3">
                                                                    <div className="col-2 mt-0" style={{ minWidth: 130 }}>
                                                                        <label className="MAINTABLE_LABEL">Tare Weight</label>
                                                                        <input type="number" id="SchemDes" />
                                                                    </div>
                                                                    <div className="col-1 mt-0" style={{ minWidth: 130 }}>
                                                                        <label className="MAINTABLE_LABEL">Net Weight</label>
                                                                        <input type="number" id="SchemDes" />
                                                                    </div>
                                                                    <div className="col-1 mt-0" style={{ minWidth: 130 }}>
                                                                        <label className="MAINTABLE_LABEL">Less Weight</label>
                                                                        <input type="number" id="SchemDes" />
                                                                    </div>
                                                                    <div className="col-1 mt-0" style={{ minWidth: 130 }}>
                                                                        <label className="MAINTABLE_LABEL">Total GT Weight</label>
                                                                        <input type="number" id="SchemDes" />
                                                                    </div>
                                                                    <div className="col-1 mt-0" style={{ minWidth: 150 }}>
                                                                        <label className="MAINTABLE_LABEL">
                                                                            Vehicle Commision
                                                                        </label>
                                                                        <input type="number" id="SchemDes" />
                                                                    </div>
                                                                    <div className="col-md-2 mt-0">
                                                                        <label className="MAINTABLE_LABEL">Date/Time</label>
                                                                        <input type="text" id="SchemDes" readOnly={true} />
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <div className="product-details-table mb-2">
                                                        <div className="product-des-box product-details-form">
                                                            <div className="product-form-container ">
                                                                <div className="row g-3">
                                                                    <div className="col-md-2 mt-0" style={{ minWidth: 130 }}>
                                                                        <label className="MAINTABLE_LABEL">Amount</label>
                                                                        <input type="number" id="SchemDes" />
                                                                    </div>
                                                                    <div className="col-md-1 mt-0" style={{ minWidth: 130 }}>
                                                                        <label className="MAINTABLE_LABEL">Loading</label>
                                                                        <Select
                                                                            placeholder="Select"
                                                                            options={[
                                                                                { value: 'Korea Republic of', label: 'Korea Republic of' },
                                                                                { value: 'US Republic of', label: 'US Republic of' },
                                                                            ]}
                                                                            isClearable
                                                                            isSearchable
                                                                            menuPlacement='top'
                                                                            styles={selectCompactStyles}
                                                                        />

                                                                    </div>
                                                                    <div className="col-md-1 mt-0" style={{ minWidth: 130 }}>
                                                                        <label className="MAINTABLE_LABEL">Commission</label>
                                                                        <input type="number" id="SchemDes" />
                                                                    </div>
                                                                    <div
                                                                        className="col-md-1 col-sm-6 mt-0"
                                                                        style={{ minWidth: 130 }}
                                                                    >
                                                                        <label className="MAINTABLE_LABEL">GT Amount</label>
                                                                        <input type="number" id="SchemDes" />
                                                                    </div>
                                                                    <div className="col-md-1 mt-0" style={{ minWidth: 150 }}>
                                                                        <label className="MAINTABLE_LABEL">Royalty</label>
                                                                        <input type="number" id="SchemDes" />
                                                                    </div>
                                                                    <div className="col-md-2 mt-0">
                                                                        <label className="MAINTABLE_LABEL">Tp Amount</label>
                                                                        <Select
                                                                            className="w-full"
                                                                            placeholder="Select Product"
                                                                            options={[
                                                                                { value: 'Korea Rebublic of', label: 'Korea Rebublic of' },
                                                                                { value: 'US Rebublic of', label: 'US Rebublic of' }
                                                                            ]}
                                                                            isClearable
                                                                            isSearchable
                                                                            menuPlacement='top'
                                                                            styles={selectCompactStyles}
                                                                        />
                                                                    </div>
                                                                    <div className="col-md-1 mt-0" style={{ minWidth: 130 }}>
                                                                        <label className="MAINTABLE_LABEL">Freight Amount</label>
                                                                        <input type="number" id="SchemDes" />
                                                                    </div>
                                                                    <div className="col-md-1 mt-0" style={{ minWidth: 130 }}>
                                                                        <label className="MAINTABLE_LABEL">Total</label>
                                                                        <input type="number" id="SchemDes" />
                                                                    </div>
                                                                    <div className="col-md-3 mt-0">
                                                                        <label  className="MAINTABLE_LABEL">Company Id</label>
                                                                        <Select
                                                                            value={dropdown}
                                                                            onChange={(selectedOptions: any) => setDropdown(selectedOptions || [])}
                                                                            options={options}
                                                                            isMulti
                                                                            isClearable
                                                                            closeMenuOnSelect={false}
                                                                            hideSelectedOptions={true}
                                                                            placeholder="Select Company"
                                                                            className="basic-multi-select"
                                                                            styles={{
                                                                              ...multiValue,
                                                                              valueContainer: (provided) => ({
                                                                                ...provided,
                                                                                  maxHeight: "60px",
                                                                                  overflowY: "auto",
                                                                                  flexWrap: "wrap",
                                                                                }),
                                                                            }}
                                                                        />
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                    {/* {renderItemsTable()} */}
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        )}
                    </div>
                </div>
            </main>
        </>
    );
}
